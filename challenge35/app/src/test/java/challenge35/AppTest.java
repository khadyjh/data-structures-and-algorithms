/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge35;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    @DisplayName("Node can be successfully added to the graph")
    public void test1(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");

        assertEquals(2,graph.size());
    }

    @Test
    @DisplayName("An edge can be successfully added to the graph")
    public void test2(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");

        graph.addEdge("A","B");

        String exp="<<Vertex{A}=>[Vertex{B}]>><<Vertex{B}=>[Vertex{A}]>>";

        assertEquals(exp,graph.toStringSimpleGraph());
    }

    @Test
    @DisplayName("A collection of all nodes can be properly retrieved from the graph")
    public void test3(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");

        List<Vertex> exp=graph.getNods();


        assertEquals(exp,graph.getNods());
    }

    @Test
    @DisplayName("All appropriate neighbors can be retrieved from the graph")
    public void test4(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");

        graph.addEdge("A","B");
        graph.addEdge("A","C");

        List<Vertex> exp=graph.getNeighbors("A");


        assertEquals(exp,graph.getNeighbors("A"));
    }

    @Test
    @DisplayName("Neighbors are returned with the weight between nodes included")
    public void test5(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");

        graph.addEdgeWeight("A","B",3);
        graph.addEdgeWeight("A","C",2);

        List<Edge> exp=graph.getWeightedNeighbors("A");

        assertEquals(exp,graph.getWeightedNeighbors("A"));
    }

    @Test
    @DisplayName("The proper size is returned, representing the number of nodes in the graph")
    public void test6(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");

        graph.addEdgeWeight("A","B",3);
        graph.addEdgeWeight("A","C",2);

        int exp=graph.size();

        assertEquals(exp,graph.size());
    }

    @Test
    @DisplayName("A graph with only one node and edge can be properly returned")
    public void test7(){
     //////////////////////
    }

    @Test
    @DisplayName("An empty graph properly returns null")
    public void test8(){
        Graph graph=new Graph();
        assertEquals("",graph.toStringSimpleGraph());
    }



    ///////////////////////////////////////////////////////////code challenge 36 //////////////////////////////////

    @Test
    @DisplayName("empty graph")
    public void test9(){
        Graph graph=new Graph();
        assertNull(graph.breadthFirst("A"));

    }

    @Test
    @DisplayName("not Empty graph")
    public void test10(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");
        graph.addNode("E");
        graph.addNode("F");

        graph.addEdge("A","B");

        graph.addEdge("B","C");
        graph.addEdge("B","D");
        graph.addEdge("C","D");
        graph.addEdge("C","F");
        graph.addEdge("C","E");
        graph.addEdge("F","E");
        graph.addEdge("F","D");

        Set<String> exp=new HashSet<>();
        exp.add("A");
        exp.add("B");
        exp.add("C");
        exp.add("D");
        exp.add("F");
        exp.add("E");

        assertEquals(exp,graph.breadthFirst("A"));

    }

    @Test
    @DisplayName("graph of 3 node")
    public void test11(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");

        graph.addEdge("A","B");
        graph.addEdge("B","C");

        Set<String> exp=new HashSet<>();
        exp.add("A");
        exp.add("B");
        exp.add("C");

        assertEquals(exp,graph.breadthFirst("A"));

    }

    ///////////////////////////////////////////////////////////code challenge 37 //////////////////////////////////


    @Test
    @DisplayName("between 3 nodes")
    public void test12(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");

        graph.addEdgeWeight("A","B",5);
        graph.addEdge("A","B");
        graph.addEdgeWeight("A","D",6);
        graph.addEdge("A","D");
        graph.addEdgeWeight("D","C",4);
        graph.addEdge("D","C");
        graph.addEdgeWeight("B","C",3);
        graph.addEdge("B","C");

        String[] arr={"A","B","C"};

        assertEquals(8,graph.businessTrip(graph,arr));
    }

    @Test
    @DisplayName("between 2 nodes")
    public void test13(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");

        graph.addEdgeWeight("A","B",5);
        graph.addEdge("A","B");
        graph.addEdgeWeight("A","D",6);
        graph.addEdge("A","D");
        graph.addEdgeWeight("D","C",4);
        graph.addEdge("D","C");
        graph.addEdgeWeight("B","C",3);
        graph.addEdge("B","C");

        String[] arr={"A","B"};

        assertEquals(5,graph.businessTrip(graph,arr));
    }

    @Test
    @DisplayName("no edges ")
    public void test14(){
        Graph graph=new Graph();
        graph.addNode("A");
        graph.addNode("B");
        graph.addNode("C");
        graph.addNode("D");

        graph.addEdgeWeight("A","B",5);
        graph.addEdge("A","B");
        graph.addEdgeWeight("A","D",6);
        graph.addEdge("A","D");
        graph.addEdgeWeight("D","C",4);
        graph.addEdge("D","C");
        graph.addEdgeWeight("B","C",3);
        graph.addEdge("B","C");

        String[] arr={"A","C"};

        assertEquals(0,graph.businessTrip(graph,arr));
    }
}
