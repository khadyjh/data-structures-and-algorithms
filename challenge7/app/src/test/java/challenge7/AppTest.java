/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge7;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    @DisplayName("Where k is greater than the length of the linked list")
    void grateThanTest(){

        assertThrows(IllegalArgumentException.class, new Executable() {
            @Override
            public void execute() throws Throwable {
                LinkedList<Integer>linkedList=new LinkedList<>();
                linkedList.insert(1);
                linkedList.insert(2);

                linkedList.insert(3);
                linkedList.insert(4);
                linkedList.insert(9);

                linkedList.KthFromEnd(6);

            }
        });
    }


    @Test
    @DisplayName("Where k and the length of the list are the same")
    void sameTest(){
        assertThrows(IllegalArgumentException.class, new Executable() {
            @Override
            public void execute() throws Throwable {
                LinkedList<Integer>linkedList=new LinkedList<>();
                linkedList.insert(1);
                linkedList.insert(2);
                linkedList.insert(3);
                linkedList.insert(4);

                linkedList.KthFromEnd(linkedList.size());

            }
        });

    }

    @Test
    @DisplayName("Where k is not a positive integer")
    void notPositiveTest(){
        assertThrows(IllegalArgumentException.class, new Executable() {
            @Override
            public void execute() throws Throwable {
                LinkedList<Integer>linkedList=new LinkedList<>();
                linkedList.insert(1);
                linkedList.insert(2);
                linkedList.insert(3);
                linkedList.insert(4);

                linkedList.KthFromEnd(-1);

            }
        });
    }


    @Test
    @DisplayName("Where the linked list is of a size 1")
    void size1Test(){
        LinkedList<Integer>linkedList=new LinkedList<>();
        linkedList.insert(1);

        int result=linkedList.KthFromEnd(0);
        int exp=1;
        assertEquals(exp,result);

    }

    @Test
    @DisplayName(" k is not at the end, but somewhere in the middle of the linked list")
    void middleTest(){
        LinkedList<Integer>linkedList=new LinkedList<>();
        linkedList.insert(1);
        linkedList.insert(2);
        linkedList.insert(3);
        linkedList.insert(4);

        int result=linkedList.KthFromEnd(2);
        int exp=3;
        assertEquals(exp,result);
    }
}
